// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.0
// source: protos/services/search.proto

package services

import (
	context "context"
	messages "easyms-es/protos/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductsSearchService_Analyze_FullMethodName = "/services.ProductsSearchService/Analyze"
)

// ProductsSearchServiceClient is the client API for ProductsSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsSearchServiceClient interface {
	// 搜索关键词分析
	Analyze(ctx context.Context, in *messages.ProductSearchParam, opts ...grpc.CallOption) (*messages.Tokens, error)
}

type productsSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsSearchServiceClient(cc grpc.ClientConnInterface) ProductsSearchServiceClient {
	return &productsSearchServiceClient{cc}
}

func (c *productsSearchServiceClient) Analyze(ctx context.Context, in *messages.ProductSearchParam, opts ...grpc.CallOption) (*messages.Tokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Tokens)
	err := c.cc.Invoke(ctx, ProductsSearchService_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsSearchServiceServer is the server API for ProductsSearchService service.
// All implementations must embed UnimplementedProductsSearchServiceServer
// for forward compatibility.
type ProductsSearchServiceServer interface {
	// 搜索关键词分析
	Analyze(context.Context, *messages.ProductSearchParam) (*messages.Tokens, error)
	mustEmbedUnimplementedProductsSearchServiceServer()
}

// UnimplementedProductsSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductsSearchServiceServer struct{}

func (UnimplementedProductsSearchServiceServer) Analyze(context.Context, *messages.ProductSearchParam) (*messages.Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedProductsSearchServiceServer) mustEmbedUnimplementedProductsSearchServiceServer() {}
func (UnimplementedProductsSearchServiceServer) testEmbeddedByValue()                               {}

// UnsafeProductsSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsSearchServiceServer will
// result in compilation errors.
type UnsafeProductsSearchServiceServer interface {
	mustEmbedUnimplementedProductsSearchServiceServer()
}

func RegisterProductsSearchServiceServer(s grpc.ServiceRegistrar, srv ProductsSearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductsSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductsSearchService_ServiceDesc, srv)
}

func _ProductsSearchService_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ProductSearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsSearchServiceServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsSearchService_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsSearchServiceServer).Analyze(ctx, req.(*messages.ProductSearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsSearchService_ServiceDesc is the grpc.ServiceDesc for ProductsSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ProductsSearchService",
	HandlerType: (*ProductsSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _ProductsSearchService_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/services/search.proto",
}

const (
	PriceSearchService_SearchPrices_FullMethodName = "/services.PriceSearchService/SearchPrices"
)

// PriceSearchServiceClient is the client API for PriceSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceSearchServiceClient interface {
	// 单产品的价格搜索
	SearchPrices(ctx context.Context, in *messages.PriceSearchParam, opts ...grpc.CallOption) (*messages.SearchPricesResult, error)
}

type priceSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceSearchServiceClient(cc grpc.ClientConnInterface) PriceSearchServiceClient {
	return &priceSearchServiceClient{cc}
}

func (c *priceSearchServiceClient) SearchPrices(ctx context.Context, in *messages.PriceSearchParam, opts ...grpc.CallOption) (*messages.SearchPricesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.SearchPricesResult)
	err := c.cc.Invoke(ctx, PriceSearchService_SearchPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceSearchServiceServer is the server API for PriceSearchService service.
// All implementations must embed UnimplementedPriceSearchServiceServer
// for forward compatibility.
type PriceSearchServiceServer interface {
	// 单产品的价格搜索
	SearchPrices(context.Context, *messages.PriceSearchParam) (*messages.SearchPricesResult, error)
	mustEmbedUnimplementedPriceSearchServiceServer()
}

// UnimplementedPriceSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPriceSearchServiceServer struct{}

func (UnimplementedPriceSearchServiceServer) SearchPrices(context.Context, *messages.PriceSearchParam) (*messages.SearchPricesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPrices not implemented")
}
func (UnimplementedPriceSearchServiceServer) mustEmbedUnimplementedPriceSearchServiceServer() {}
func (UnimplementedPriceSearchServiceServer) testEmbeddedByValue()                            {}

// UnsafePriceSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceSearchServiceServer will
// result in compilation errors.
type UnsafePriceSearchServiceServer interface {
	mustEmbedUnimplementedPriceSearchServiceServer()
}

func RegisterPriceSearchServiceServer(s grpc.ServiceRegistrar, srv PriceSearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedPriceSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PriceSearchService_ServiceDesc, srv)
}

func _PriceSearchService_SearchPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.PriceSearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceSearchServiceServer).SearchPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceSearchService_SearchPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceSearchServiceServer).SearchPrices(ctx, req.(*messages.PriceSearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceSearchService_ServiceDesc is the grpc.ServiceDesc for PriceSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.PriceSearchService",
	HandlerType: (*PriceSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchPrices",
			Handler:    _PriceSearchService_SearchPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/services/search.proto",
}
